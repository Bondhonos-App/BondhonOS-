// api/sslcommerz-webhook.js (conceptual snippet)
import { initializeApp, getApps } from 'firebase-admin/app';
import { getFirestore } from 'firebase-admin/firestore';
if (!getApps().length) initializeApp();
const adb = getFirestore();

export default async function handler(req, res) {
  try {
    const { status, tran_id, uid, refCode, amount, productId } = req.query;
    await adb.collection('payments').doc(tran_id).set({ status, uid: uid||null, amount: Number(amount||0), productId: productId||null, at: new Date().toISOString() }, {merge:true});

    if (status === 'success' && uid) {
      // premium enable
      if (productId === 'premium' || !productId) {
        await adb.collection('users').doc(uid).set({ premium: true }, {merge:true});
      }
      // referral credit
      if (refCode) {
        const refSnap = await adb.collection('users').where('referralCode','==',refCode).limit(1).get();
        if (!refSnap.empty) {
          const refUid = refSnap.docs[0].id;
          await adb.collection('users').doc(refUid).set({ referrals: (adb.FieldValue||require('firebase-admin').firestore).FieldValue.increment(1) }, {merge:true});
          await adb.collection('referrals').add({ referrerUid: refUid, refereeUid: uid, status:'paid', at: new Date().toISOString() });
        }
      }
      // order record
      await adb.collection('orders').add({ uid, productId: productId||'premium', amount: Number(amount||0), status:'paid', at: new Date().toISOString() });
    }
    return res.redirect(302, '/?paid=1');
  } catch (e) {
    console.error(e);
    return res.status(500).send('webhook error');
  }
}
